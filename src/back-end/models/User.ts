import mongoose, { Document, Schema, Types } from "mongoose";
import {
  EMAIL_REGEX,
  PASSWORD_REGEX,
  SSN_REGEX,
  USERNAME_REGEX,
} from "../../utils/util";

export const Gender = {
  Male: "Male",
  Female: "Female",
  Other: "Other",
};

export const Visa = {
  Citizen: "Citizen",
  GreenCard: "Green Card",
  International: "International",
  H1B: "H1B",
  L2: "L2",
  F1: "F1 (CPT, OPT)",
  H4: "H4",
  Other: "Other",
};

type GenderType = (typeof Gender)[keyof typeof Gender];
type VisaTypeUnion = (typeof Visa)[keyof typeof Visa];

export interface IPersonName {
  firstName: string;
  middleName?: string;
  lastName: string;
  preferredName?: string;
}

export interface IContactInfo {
  cellPhone: string;
  workPhone?: string;
  email: string;
}

export interface IEmployment {
  visaTitle: VisaTypeUnion;
  startDate: Date;
  endDate: Date;
  daysRemaining: number;
}

export interface IEmergencyContact {
  realName: IPersonName;
  contactInfo: IContactInfo;
  relationship: string;
}

export interface IDocumentInfo {
  profilePictureUrl?: string;
  driverLicenseUrl?: string;
  workAuthorizationUrl?: string;
}

export interface IReference {
  realName: IPersonName;
  contactInfo: IContactInfo;
}

/**
 * Sub-Schema for Person's Name
 */
const PersonNameSchema = new Schema(
  {
    firstName: { type: String, required: true },
    middleName: { type: String },
    lastName: { type: String, required: true },
    preferredName: { type: String },
  },
  { _id: false }
);

/**
 * Sub-Schema for Person's Contact Information
 */
const ContactInfoSchema = new Schema(
  {
    cellPhone: { type: String, required: true },
    workPhone: { type: String },
    email: { type: String, required: true },
  },
  { _id: false }
);

/**
 * Sub-Schema for Emergency Contact
 */
const EmergencyContactSchema = new Schema(
  {
    realName: PersonNameSchema,
    contactInfo: ContactInfoSchema,
    relationship: { type: String, required: true },
  },
  { _id: false }
);

/**
 * Sub-Schema for Necessary documents
 */
const DocumentSchema = new Schema(
  {
    profilePictureUrl: { type: String },
    driverLicenseUrl: { type: String },
    workAuthorizationUrl: { type: String },
  },
  { _id: false }
);

/**
 * Sub-Schema for who recommended you to this company
 */
const ReferenceSchema = new Schema(
  {
    realName: PersonNameSchema,
    contactInfo: ContactInfoSchema,
  },
  { _id: false }
);

export interface IUser extends Document {
  _id: Types.ObjectId; // Auto generated by database
  username: string; // User name length should be >= 5 && <= 16
  password: string; // User password length should be >= 8 && one uppercase, one lowercase
  email: string; // Should be unique and format correct
  realName: IPersonName;
  ssn: string; // Should match xxx-xx-xxxx format
  dateOfBirth: Date;
  gender: GenderType; // Should be one of the type Male, Female, Other
  address: string;
  contactInfo: IContactInfo;
  employment: IEmployment;
  emergencyContact: IEmergencyContact;
  documents: IDocumentInfo;
  reference: IReference;
  feedback: string; // This uses for storing feedback from HR
  role: "HR" | "Employee";
}

const UserSchema = new Schema<IUser>(
  {
    username: {
      type: String,
      required: true,
      unique: true,
      match: USERNAME_REGEX,
    },
    password: { type: String, required: true, match: PASSWORD_REGEX },
    email: { type: String, required: true, unique: true, match: EMAIL_REGEX },
    realName: PersonNameSchema,
    ssn: { type: String, required: true, match: SSN_REGEX },
    dateOfBirth: { type: Date, required: true },
    gender: { type: String, enum: Object.values(Gender), required: true },
    address: { type: String, required: true },
    contactInfo: ContactInfoSchema,
    employment: {
      visaTitle: { type: String, enum: Object.values(Visa), required: true },
      startDate: { type: Date, required: true },
      endDate: { type: Date },
      daysRemaining: { type: Number, default: 0 },
    },
    emergencyContact: EmergencyContactSchema,
    documents: DocumentSchema,
    reference: ReferenceSchema,
    feedback: { type: String },
    role: {
      type: String,
      enum: ["HR", "Employee"],
      required: true,
      default: "Employee",
    },
  },
  { timestamps: true }
);

export const User = mongoose.model<IUser>("User", UserSchema);
