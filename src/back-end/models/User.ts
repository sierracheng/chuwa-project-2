import mongoose, { Document, Schema, Types } from "mongoose";
import {
  EMAIL_REGEX,
  PASSWORD_REGEX,
  SSN_REGEX,
  USERNAME_REGEX,
} from "../../utils/util";
import type { IOnboardingApplication } from "./OnboardingApplication";
import {
  AddressSchema,
  ContactInfoSchema,
  EmergencyContactSchema,
  PersonNameSchema,
} from "./Subschema";
import type {
  IPersonName,
  IContactInfo,
  IEmployment,
  IEmergencyContact,
  GenderType,
  IAddress,
} from "./Types";
import { Gender, Visa } from "./Types";

export interface IUser extends Document {
  _id: Types.ObjectId; // Auto generated by database
  username: string; // User name length should be >= 5 && <= 16
  password: string; // User password length should be >= 8 && one uppercase, one lowercase
  email: string; // Should be unique and format correct
  realName: IPersonName;
  ssn: string; // Should match xxx-xx-xxxx format
  dateOfBirth: Date;
  gender: GenderType; // Should be one of the type Male, Female, Other
  address: IAddress;
  contactInfo: IContactInfo;
  employment: IEmployment;
  emergencyContact: IEmergencyContact;
  onboardingApplication: IOnboardingApplication;
  role: "HR" | "Employee";
}

const UserSchema = new Schema<IUser>(
  {
    // This will be created when user first time sign up
    username: {
      type: String,
      required: true,
      unique: true,
      match: USERNAME_REGEX,
    },
    password: { type: String, required: true, match: PASSWORD_REGEX },
    email: { type: String, required: true, unique: true, match: EMAIL_REGEX },
    ///////////////////////////////////////////////////////////

    // This will be updated when user first time login to the system
    realName: PersonNameSchema,
    ssn: { type: String, match: SSN_REGEX },
    dateOfBirth: { type: Date },
    gender: { type: String, enum: Object.values(Gender) },
    address: AddressSchema,
    contactInfo: ContactInfoSchema,
    employment: {
      visaTitle: { type: String, enum: Object.values(Visa) },
      startDate: { type: Date },
      endDate: { type: Date },
      // TODO: Calculate days remaining
      daysRemaining: { type: Number, default: 0 },
    },
    emergencyContact: EmergencyContactSchema,
    onboardingApplication: {
      type: Schema.Types.ObjectId,
      ref: "OnboardingApplication",
    },
    role: {
      type: String,
      enum: ["HR", "Employee"],
      default: "Employee",
    },
    ///////////////////////////////////////////////////////////
  },
  { timestamps: true }
);

export const User = mongoose.model<IUser>("User", UserSchema);
